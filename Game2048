import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Random;

public class Game2048 extends JFrame {
    private static final int SIZE = 4;
    private final int[][] board = new int[SIZE][SIZE];
    private final JLabel[][] labels = new JLabel[SIZE][SIZE];
    private final Random rand = new Random();
    private int score = 0;

    public Game2048() {
        setTitle("2048 Game");
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setSize(400, 400);
        setLayout(new GridLayout(SIZE, SIZE));
        initBoard();
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                boolean moved = false;
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_UP -> moved = moveUp();
                    case KeyEvent.VK_DOWN -> moved = moveDown();
                    case KeyEvent.VK_LEFT -> moved = moveLeft();
                    case KeyEvent.VK_RIGHT -> moved = moveRight();
                }
                if (moved) {
                    addRandomTile();
                    updateBoard();
                    checkGameOver();
                }
            }
        });
        setFocusable(true);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void initBoard() {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                labels[i][j] = new JLabel("", SwingConstants.CENTER);
                labels[i][j].setFont(new Font("Arial", Font.BOLD, 32));
                labels[i][j].setOpaque(true);
                labels[i][j].setBackground(Color.LIGHT_GRAY);
                add(labels[i][j]);
            }
        }
        addRandomTile();
        addRandomTile();
        updateBoard();
    }

    private void updateBoard() {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                int value = board[i][j];
                labels[i][j].setText(value == 0 ? "" : String.valueOf(value));
                labels[i][j].setBackground(getColor(value));
            }
        }
    }

    private Color getColor(int value) {
        return switch (value) {
            case 0 -> Color.LIGHT_GRAY;
            case 2 -> new Color(0xEEE4DA);
            case 4 -> new Color(0xEDE0C8);
            case 8 -> new Color(0xF2B179);
            case 16 -> new Color(0xF59563);
            case 32 -> new Color(0xF67C5F);
            case 64 -> new Color(0xF65E3B);
            case 128 -> new Color(0xEDCF72);
            case 256 -> new Color(0xEDCC61);
            case 512 -> new Color(0xEDC850);
            case 1024 -> new Color(0xEDC53F);
            case 2048 -> new Color(0xEDC22E);
            default -> Color.BLACK;
        };
    }

    private void addRandomTile() {
        int emptyCount = 0;
        for (int[] row : board)
            for (int val : row)
                if (val == 0) emptyCount++;

        if (emptyCount == 0) return;

        int index = rand.nextInt(emptyCount);
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (board[i][j] == 0) {
                    if (index == 0) {
                        board[i][j] = rand.nextDouble() < 0.9 ? 2 : 4;
                        return;
                    }
                    index--;
                }
            }
        }
    }

    private boolean moveLeft() {
        boolean moved = false;
        for (int i = 0; i < SIZE; i++) {
            int[] temp = new int[SIZE];
            int idx = 0;
            boolean merged = false;
            for (int j = 0; j < SIZE; j++) {
                if (board[i][j] != 0) {
                    if (idx > 0 && temp[idx - 1] == board[i][j] && !merged) {
                        temp[idx - 1] *= 2;
                        score += temp[idx - 1];
                        merged = true;
                        moved = true;
                    } else {
                        temp[idx++] = board[i][j];
                        if (j != idx - 1) moved = true;
                        merged = false;
                    }
                }
            }
            board[i] = temp;
        }
        return moved;
    }

    private boolean moveRight() {
        rotateBoard();
        rotateBoard();
        boolean moved = moveLeft();
        rotateBoard();
        rotateBoard();
        return moved;
    }

    private boolean moveUp() {
        rotateBoard();
        rotateBoard();
        rotateBoard();
        boolean moved = moveLeft();
        rotateBoard();
        return moved;
    }

    private boolean moveDown() {
        rotateBoard();
        boolean moved = moveLeft();
        rotateBoard();
        rotateBoard();
        rotateBoard();
        return moved;
    }

    private void rotateBoard() {
        int[][] temp = new int[SIZE][SIZE];
        for (int i = 0; i < SIZE; i++)
            for (int j = 0; j < SIZE; j++)
                temp[i][j] = board[SIZE - j - 1][i];
        for (int i = 0; i < SIZE; i++)
            System.arraycopy(temp[i], 0, board[i], 0, SIZE);
    }

    private void checkGameOver() {
        if (!canMove()) {
            JOptionPane.showMessageDialog(this, "Game Over! Your score: " + score);
            if (score > GameLauncher.game2048Record) {
                GameLauncher.game2048Record = score;
            }
            dispose();
        }
    }

    private boolean canMove() {
        for (int i = 0; i < SIZE; i++)
            for (int j = 0; j < SIZE; j++) {
                if (board[i][j] == 0) return true;
                if (i < SIZE - 1 && board[i][j] == board[i + 1][j]) return true;
                if (j < SIZE - 1 && board[i][j] == board[i][j + 1]) return true;
            }
        return false;
    }
}
